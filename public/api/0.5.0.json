{
  "version": "v0.5.0",
  "isLatest": false,
  "html": "https://github.com/ryansolid/solid/releases/tag/v0.5.0",
  "date": "2019-04-15T03:31:39Z",
  "tar": "https://api.github.com/repos/ryansolid/solid/tarball/v0.5.0",
  "zip": "https://api.github.com/repos/ryansolid/solid/zipball/v0.5.0",
  "sections": [
    {
      "slug": "api",
      "title": "API",
      "level": 1,
      "children": []
    },
    {
      "slug": "jsx-rendering",
      "title": "JSX Rendering",
      "level": 1,
      "children": [
        {
          "slug": "binding",
          "title": "Binding",
          "level": 2,
          "children": []
        },
        {
          "slug": "events",
          "title": "Events",
          "level": 2,
          "children": []
        },
        {
          "slug": "control-flow",
          "title": "Control Flow",
          "level": 2,
          "children": [
            {
              "slug": "selectwhen(signal%2C-handler)",
              "title": "selectWhen(signal, handler)",
              "level": 3,
              "children": []
            },
            {
              "slug": "selecteach(signal%2C-handler)",
              "title": "selectEach(signal, handler)",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "custom-directives",
          "title": "Custom Directives",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "signals",
      "title": "Signals",
      "level": 1,
      "children": []
    },
    {
      "slug": "state",
      "title": "State",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"api\"><a class=\"header-anchor\" href=\"#api\">#</a> API</h1>\n<h3 id=\"createroot(disposer-%3D%3E-%3Ccode%3E)\"><a class=\"header-anchor\" href=\"#createroot(disposer-%3D%3E-%3Ccode%3E)\">#</a> <code>createRoot(disposer =&gt; &lt;code&gt;)</code></h3>\n<p>Creates a new non-tracked context that doesn't auto-dispose. All Solid code should be wrapped in one of these top level as they ensure that all memory/computations are freed up.</p>\n<h3 id=\"createstate(initvalue)%3A-%5Bstate%2C-setstate%5D\"><a class=\"header-anchor\" href=\"#createstate(initvalue)%3A-%5Bstate%2C-setstate%5D\">#</a> <code>createState(initValue): [state, setState]</code></h3>\n<p>Creates a new State object and setState pair that can be used to maintain your componenents state.</p>\n<h3 id=\"createeffect(()-%3D%3E-%3Ccode%3E%2C-dependencies%2C-defer)\"><a class=\"header-anchor\" href=\"#createeffect(()-%3D%3E-%3Ccode%3E%2C-dependencies%2C-defer)\">#</a> <code>createEffect(() =&gt; &lt;code&gt;, dependencies, defer)</code></h3>\n<p>Creates a new effect that automatically tracks dependencies. The 2nd optional argument is an explicit array of dependencies. The 3rd optional argument is whether to defer initial execution of the effect until a value has changed (this only works with explicit dependencies).</p>\n<h3 id=\"createsignal(initialvalue%2C-comparatorfn)%3A-%5Bgetvaluefn%2C-setvaluefn%5D\"><a class=\"header-anchor\" href=\"#createsignal(initialvalue%2C-comparatorfn)%3A-%5Bgetvaluefn%2C-setvaluefn%5D\">#</a> <code>createSignal(initialValue, comparatorFn): [getValueFn, setValueFn]</code></h3>\n<p>Creates a new signal that can be used for reactive tracking. By default signals always notify on setting a value. However a comparator can be passed in to indicate whether the values should be considered equal and listeners not notified.</p>\n<h3 id=\"creatememo(prev-%3D%3E-%3Ccode%3E%2C-initialvalue)%3A-getvaluefn\"><a class=\"header-anchor\" href=\"#creatememo(prev-%3D%3E-%3Ccode%3E%2C-initialvalue)%3A-getvaluefn\">#</a> <code>createMemo(prev =&gt; &lt;code&gt;, initialValue): getValueFn</code></h3>\n<p>Creates a readonly signal that recalculates it's value whenever the executed codes dependencies update.</p>\n<h3 id=\"oncleanup(()-%3D%3E-%3Ccode%3E)\"><a class=\"header-anchor\" href=\"#oncleanup(()-%3D%3E-%3Ccode%3E)\">#</a> <code>onCleanup(() =&gt; &lt;code&gt;)</code></h3>\n<p>Registers a cleanup method that performs that executes on disposal or recalculation of the current context.</p>\n<h3 id=\"sample(()-%3D%3E-%3Ccode%3E)%3A-any\"><a class=\"header-anchor\" href=\"#sample(()-%3D%3E-%3Ccode%3E)%3A-any\">#</a> <code>sample(() =&gt; &lt;code&gt;): any</code></h3>\n<p>Ignores tracking any of the dependencies in the executing code block and returns the value.</p>\n<h3 id=\"freeze(()-%3D%3E-%3Ccode%3E)%3A-any\"><a class=\"header-anchor\" href=\"#freeze(()-%3D%3E-%3Ccode%3E)%3A-any\">#</a> <code>freeze(() =&gt; &lt;code&gt;): any</code></h3>\n<p>Ensures that all updates within the block happen at the same time to prevent unnecessary recalculation. Solid State's setState method and computations(useEffect, useMemo) automatically wrap their code in freeze blocks.</p>\n</section><section class=\"mt-10\"><h1 id=\"jsx-rendering\"><a class=\"header-anchor\" href=\"#jsx-rendering\">#</a> JSX Rendering</h1>\n<p>Rendering involves precompilation of JSX templates into optimized native js code. The JSX code constructs:</p>\n<ul>\n<li>Template DOM elements which are cloned on each instantiation</li>\n<li>A series of reference declarations using only firstChild and nextSibling</li>\n<li>Fine grained computations to update the created elements.</li>\n</ul>\n<p>This approach both is more performant and produces less code then creating each element one by one with document.createElement.</p>\n<p>More documentation is available at: <a href=\"https://github.com/ryansolid/babel-plugin-jsx-dom-expressions\">babel-plugin-jsx-dom-expressions</a></p>\n<h2 id=\"binding\"><a class=\"header-anchor\" href=\"#binding\">#</a> Binding</h2>\n<p>By default data is simply bound to expressions. If you wish to bind it for dynamic changes add inner parenthesis to your binding. Ex {( )}</p>\n<h2 id=\"events\"><a class=\"header-anchor\" href=\"#events\">#</a> Events</h2>\n<p>on_____ properties get added (addEventListener) as event handlers on the element. Camel Case events will be delegated by default and the second argument will be the model property or (nearest parent's). Use all lowercase for directly bound native events.</p>\n<p>If you need to use non-lowercase or hyphenated event names use the events binding.</p>\n<h2 id=\"control-flow\"><a class=\"header-anchor\" href=\"#control-flow\">#</a> Control Flow</h2>\n<p>While you could use a map function for loops and raw ternary operators of conditionals they aren't optimized. While perhaps not as big of a deal in the VDOM since Solid is designed to not execute all the code from top down repeatedly we rely on techniques like isolated contexts and memoization. This is complicated and requires special methods. To keep things simple and optimizable the the renderer uses a special JSX tag (&lt;$&gt;) for control flow. Current 'each', 'when', 'portal', and 'suspend' are supported.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A7E89\">&lt;</span><span style=\"color: #5298C4\">ul</span><span style=\"color: #6A7E89\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  &lt;</span><span style=\"color: #D4856A\">$</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">each=</span><span style=\"color: #6A7E89\">{ </span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">users</span><span style=\"color: #6A7E89\"> } </span><span style=\"color: #D4856A\">fallback=</span><span style=\"color: #6A7E89\">{ &lt;</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt;No Users&lt;/</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt; }&gt;{</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #3E4A51\">user</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> &lt;</span><span style=\"color: #5298C4\">li</span><span style=\"color: #6A7E89\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">      &lt;</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt;{( </span><span style=\"color: #3E4A51\">user</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">firstName</span><span style=\"color: #6A7E89\"> )}&lt;/</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">      &lt;</span><span style=\"color: #D4856A\">$</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">when=</span><span style=\"color: #6A7E89\">{ </span><span style=\"color: #3E4A51\">user</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">stars</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #529CA8\">100</span><span style=\"color: #6A7E89\"> }&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">        &lt;</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt;Verified&lt;/</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">      &lt;/</span><span style=\"color: #D4856A\">$</span><span style=\"color: #6A7E89\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    &lt;/</span><span style=\"color: #5298C4\">li</span><span style=\"color: #6A7E89\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  }&lt;/</span><span style=\"color: #D4856A\">$</span><span style=\"color: #6A7E89\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">&lt;/</span><span style=\"color: #5298C4\">ul</span><span style=\"color: #6A7E89\">&gt;</span></span></code></pre>\n<p>The library also includes a couple afterRender directives that can be applied to the each and when control flow.</p>\n<h3 id=\"selectwhen(signal%2C-handler)\"><a class=\"header-anchor\" href=\"#selectwhen(signal%2C-handler)\">#</a> selectWhen(signal, handler)</h3>\n<h3 id=\"selecteach(signal%2C-handler)\"><a class=\"header-anchor\" href=\"#selecteach(signal%2C-handler)\">#</a> selectEach(signal, handler)</h3>\n<p>These trigger on the signal to indicate the selected model/s and calls the handler function with associated element, and a boolean to indicate whether the model is selected or not. If the handler is a string instead of a function the default behavior is to toggle a class with the string name.</p>\n<p>These directives also require setting a model on the child element in order to identify the node.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setState</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createState</span><span style=\"color: #6A7E89\">({</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  list: [ </span><span style=\"color: #A6B4BC\">/* ... */</span><span style=\"color: #6A7E89\"> ],</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  selected: [ </span><span style=\"color: #A6B4BC\">/* ... */</span><span style=\"color: #6A7E89\">]</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">})</span></span>\n\n<span class=\"line\"><span style=\"color: #A6B4BC\">/* .... */</span></span>\n\n<span class=\"line\"><span style=\"color: #D4856A\">&lt;</span><span style=\"color: #3E4A51\">$</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #3E4A51\">each</span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\">{state.</span><span style=\"color: #3E4A51\">list</span><span style=\"color: #6A7E89\">}</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #3E4A51\">afterRender</span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\">{</span><span style=\"color: #43B5B3\">selectEach</span><span style=\"color: #6A7E89\">(</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    () </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> state.selected,</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    (</span><span style=\"color: #3E4A51\">node</span><span style=\"color: #6A7E89\">, selected) =&gt; node.toggleClass(</span><span style=\"color: #84C4CE\">&#39;selected&#39;</span><span style=\"color: #6A7E89\">, selected)</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  )}</span></span>\n<span class=\"line\"><span style=\"color: #D4856A\">&gt;</span><span style=\"color: #6A7E89\">{ </span><span style=\"color: #3E4A51\">item</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #D4856A\">&lt;</span><span style=\"color: #3E4A51\">div</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">model</span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\">{</span><span style=\"color: #3E4A51\">item</span><span style=\"color: #6A7E89\">} </span><span style=\"color: #3E4A51\">onClick</span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\">{</span><span style=\"color: #3E4A51\">select</span><span style=\"color: #6A7E89\">} </span><span style=\"color: #D4856A\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">}</span><span style=\"color: #D4856A\">&lt;/</span><span style=\"color: #3E4A51\">$</span><span style=\"color: #D4856A\">&gt;</span></span></code></pre>\n<h2 id=\"custom-directives\"><a class=\"header-anchor\" href=\"#custom-directives\">#</a> Custom Directives</h2>\n<p>Custom Directives are supported by Solid. They aren't often necessary as Components/HOCs can carry their own capability. However it is a powerful tool to enhance the functionality of the rendering. And can be suitable for small reusable behavior and optimizations.</p>\n<p>Custom bindings are functions that take the form</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">custom</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> (</span><span style=\"color: #3E4A51\">element</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">valueAccessor</span><span style=\"color: #6A7E89\">) </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">value</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">valueAccessor</span><span style=\"color: #6A7E89\">();</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #A6B4BC\">// ... do something with the value and the element</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">}</span></span></code></pre>\n<p>To use a binding simply prepend it with a $:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D4856A\">&lt;</span><span style=\"color: #3E4A51\">div</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">$custom</span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\">{</span><span style=\"color: #3E4A51\">someConfig</span><span style=\"color: #6A7E89\">} </span><span style=\"color: #D4856A\">/&gt;</span></span></code></pre>\n</section><section class=\"mt-10\"><h1 id=\"signals\"><a class=\"header-anchor\" href=\"#signals\">#</a> Signals</h1>\n<p>Signals are the glue that hold the library together. They often are invisible but interact in very powerful ways that you get more familiar with Solid they unlock a lot of potential.</p>\n<p>At it's core Solid uses <a href=\"https://github.com/adamhaile/S\">S.js</a> to propagate it's change detection. Signals are a simple primitive that contain values that change over time. With Signals you can track sorts of changes from various sources in your applications. Solid's State object is built from a Proxy over a tree of Signals. You can update a Signal manually or from any Async source.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D4856A\">import</span><span style=\"color: #6A7E89\"> { </span><span style=\"color: #3E4A51\">createSignal</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">onCleanup</span><span style=\"color: #6A7E89\"> } </span><span style=\"color: #D4856A\">from</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #84C4CE\">&#39;solid-js&#39;</span><span style=\"color: #6A7E89\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #5298C4\">function</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">useTick</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">delay</span><span style=\"color: #6A7E89\">) {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">getCount</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setCount</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createSignal</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #529CA8\">0</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #3E4A51\">handle</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">setInterval</span><span style=\"color: #6A7E89\">(() </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">setCount</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #43B5B3\">getCount</span><span style=\"color: #6A7E89\">() </span><span style=\"color: #D4856A\">+</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\">), </span><span style=\"color: #3E4A51\">delay</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #43B5B3\">onCleanup</span><span style=\"color: #6A7E89\">(() </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">clearInterval</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">handle</span><span style=\"color: #6A7E89\">));</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #D4856A\">return</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">getCount</span><span style=\"color: #6A7E89\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">}</span></span></code></pre>\n<h3 id=\"accessors-%26-context\"><a class=\"header-anchor\" href=\"#accessors-%26-context\">#</a> Accessors &amp; Context</h3>\n<p>Signals are special functions that when executed return their value. Accessors are just functions that &quot;access&quot;, or read a value from one or more Signals. At the time of reading the Signal the current execution context (a computation) has the ability to track Signals that have been read, building out a dependency tree that can automatically trigger recalculations as their values are updated. This can be as nested as desired and each new nested context tracks it's own dependencies. Since Accessors by nature of being composed of Signal reads are too reactive we don't need to wrap Signals at every level just at the top level where they are used and around any place that is computationally expensive where you may want to memoize or store intermediate values.</p>\n<h3 id=\"computations\"><a class=\"header-anchor\" href=\"#computations\">#</a> Computations</h3>\n<p>An computation is calculation over a function execution that automatically dynamically tracks any dependent signals. A computation goes through a cycle on execution where it releases its previous execution's dependencies, then executes grabbing the current dependencies.</p>\n<p>There are 2 main computations used by Solid: Effects which produce side effects, and Memos which are pure and return a read-only Signal.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D4856A\">import</span><span style=\"color: #6A7E89\"> { </span><span style=\"color: #3E4A51\">createState</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">createEffect</span><span style=\"color: #6A7E89\"> } </span><span style=\"color: #D4856A\">from</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #84C4CE\">&#39;solid-js&#39;</span><span style=\"color: #6A7E89\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setState</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createState</span><span style=\"color: #6A7E89\">({count: </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\">});</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">createEffect</span><span style=\"color: #6A7E89\">(() </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">console</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #43B5B3\">log</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">count</span><span style=\"color: #6A7E89\">));</span></span>\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">({count: </span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">count</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">+</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\">});</span></span>\n\n<span class=\"line\"><span style=\"color: #A6B4BC\">// 1</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// 2</span></span></code></pre>\n<p>Memos also pass the previous value on each execution. This is useful for reducing operations (obligatory Redux in a couple lines example):</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">reducer</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> (</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">action</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> {}) </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #D4856A\">switch</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">action</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">type</span><span style=\"color: #6A7E89\">) {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #D4856A\">case</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #84C4CE\">&#39;LIST/ADD&#39;</span><span style=\"color: #6A7E89\">:</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">      </span><span style=\"color: #D4856A\">return</span><span style=\"color: #6A7E89\"> {</span><span style=\"color: #D4856A\">...</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, list: [</span><span style=\"color: #D4856A\">...</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">list</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">action</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">payload</span><span style=\"color: #6A7E89\">]};</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #D4856A\">default</span><span style=\"color: #6A7E89\">:</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">      </span><span style=\"color: #D4856A\">return</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #A6B4BC\">// redux</span></span>\n<span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">getAction</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">dispatch</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createSignal</span><span style=\"color: #6A7E89\">(),</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #3E4A51\">getStore</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createMemo</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">reducer</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #43B5B3\">getAction</span><span style=\"color: #6A7E89\">()), {list: []});</span></span>\n\n<span class=\"line\"><span style=\"color: #A6B4BC\">// subscribe and dispatch</span></span>\n<span class=\"line\"><span style=\"color: #43B5B3\">createEffect</span><span style=\"color: #6A7E89\">(() </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">console</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #43B5B3\">log</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #43B5B3\">getStore</span><span style=\"color: #6A7E89\">().</span><span style=\"color: #3E4A51\">list</span><span style=\"color: #6A7E89\">));</span></span>\n<span class=\"line\"><span style=\"color: #43B5B3\">dispatch</span><span style=\"color: #6A7E89\">({type: </span><span style=\"color: #84C4CE\">&#39;LIST/ADD&#39;</span><span style=\"color: #6A7E89\">, payload: {id: </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\">, title: </span><span style=\"color: #84C4CE\">&#39;New Value&#39;</span><span style=\"color: #6A7E89\">}});</span></span></code></pre>\n<p>That being said there are plenty of reasons to use actual Redux.</p>\n<h3 id=\"rendering\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h3>\n<p>You can also use signals directly. As an example, the following will show a count of ticking seconds:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D4856A\">import</span><span style=\"color: #6A7E89\"> { </span><span style=\"color: #3E4A51\">createRoot</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">createSignal</span><span style=\"color: #6A7E89\"> } </span><span style=\"color: #D4856A\">from</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #84C4CE\">&#39;solid-js&#39;</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">createRoot</span><span style=\"color: #6A7E89\">(() </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">getSeconds</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setSeconds</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createSignal</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #529CA8\">0</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #3E4A51\">div</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> &lt;</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt;Number of seconds elapsed: {( </span><span style=\"color: #43B5B3\">getSeconds</span><span style=\"color: #6A7E89\">() )}&lt;/</span><span style=\"color: #5298C4\">div</span><span style=\"color: #6A7E89\">&gt;</span></span>\n\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #43B5B3\">setInterval</span><span style=\"color: #6A7E89\">(() </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">setSeconds</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #43B5B3\">getSeconds</span><span style=\"color: #6A7E89\">() </span><span style=\"color: #D4856A\">+</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\">), </span><span style=\"color: #529CA8\">1000</span><span style=\"color: #6A7E89\">)</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #3E4A51\">document</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">body</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #43B5B3\">appendChild</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">div</span><span style=\"color: #6A7E89\">)</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">})</span></span></code></pre>\n<h3 id=\"composition\"><a class=\"header-anchor\" href=\"#composition\">#</a> Composition</h3>\n<p>State and Signals combine wonderfully as wrapping a state selector in a function instantly makes it reactive accessor. They encourage composing more sophisticated patterns to fit developer need.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #A6B4BC\">// deep reconciled immutable reducer</span></span>\n<span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">useReducer</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> (</span><span style=\"color: #3E4A51\">reducer</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">init</span><span style=\"color: #6A7E89\">) </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setState</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">init</span><span style=\"color: #6A7E89\">),</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    [</span><span style=\"color: #3E4A51\">getAction</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">dispatch</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createSignal</span><span style=\"color: #6A7E89\">();</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #43B5B3\">createEffect</span><span style=\"color: #6A7E89\">((</span><span style=\"color: #3E4A51\">prevState</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">init</span><span style=\"color: #6A7E89\">) </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #5298C4\">let</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">action</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">next</span><span style=\"color: #6A7E89\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #D4856A\">if</span><span style=\"color: #6A7E89\"> (</span><span style=\"color: #D4856A\">!</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">action</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">getAction</span><span style=\"color: #6A7E89\">())) </span><span style=\"color: #D4856A\">return</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">prevState</span><span style=\"color: #6A7E89\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #3E4A51\">next</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">reducer</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">prevState</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">action</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #43B5B3\">reconcile</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">next</span><span style=\"color: #6A7E89\">));</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #D4856A\">return</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">next</span><span style=\"color: #6A7E89\">;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  }, [ </span><span style=\"color: #3E4A51\">getAction</span><span style=\"color: #6A7E89\"> ])</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  </span><span style=\"color: #D4856A\">return</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">dispatch</span><span style=\"color: #6A7E89\">];</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">}</span></span></code></pre>\n<h3 id=\"observable\"><a class=\"header-anchor\" href=\"#observable\">#</a> Observable</h3>\n<p>Signals and Observable are similar concepts that can work together but there are a few key differences. Observables are as defined by the <a href=\"https://github.com/tc39/proposal-observable\">TC39 Proposal</a>. These are a standard way of representing streams, and follow a few key conventions. Mostly that they are cold, unicast, and push-based by default. What this means is that they do not do anything until subscribed to at which point they create the source, and do so for each subscription. So if you had an Observable from a DOM Event, subscribing would add an event listener for each function you pass. In so being unicast they aren't managing a list of subscribers. Finally being push you don't ask for the latest value, they tell you.</p>\n<p>Observables track next value, errors, and completion. This is very useful for tracking discreet events over time. Signals are much simpler. They are hot and multicast in nature and while capable of pushing values over time aren't aware of it themselves. They are simple and synchronous. They don't complete, they exist or they don't exist.</p>\n<p>Observables can work well with Signals as being a source that feeds data into them. Like State, Observables are another tool that allow more control in a specific aspect of your application. Where State is valuable for reconciling multiple Signals together into a serializable structure to keep managing Component or Store code simple, Observables are useful for transforming Async data pipelines like handling Data Communication services.</p>\n</section><section class=\"mt-10\"><h1 id=\"state\"><a class=\"header-anchor\" href=\"#state\">#</a> State</h1>\n<p>State is the core work horse of Solid. It represents the local data, the output all the asynchronous interaction as a simple to read javascript object. While fine grained observable itself it is has a minimal API footprint and in most cases be treated like a normal object when reading, supporting destructuring and native methods. However you are dealing with proxy objects that automatically tracked as dependencies of memoization and effects and upon changing will force evaluation.</p>\n<p>While this state concept is heavily borrowed from React and it's API from ImmutableJS, there is a key difference in the role it plays here. In React you keep things simple in your state and the whole library is about reconciling DOM rendering. Here you can almost view the State object as the target, the thing that is diffed and maintained. The DOM rendering is actually quite simple to the point the compiled source exposes the vast majority of the DOM manipulations, where you can easily drop a breakpoint. So change detection being nested and focusing on interaction with other change mechanisms are key.</p>\n<h3 id=\"createstate(object)\"><a class=\"header-anchor\" href=\"#createstate(object)\">#</a> <code>createState(object)</code></h3>\n<p>Initializes with object value and returns an array where the first index is the state object and the second is the setState method.</p>\n<h3 id=\"setstate(changes)\"><a class=\"header-anchor\" href=\"#setstate(changes)\">#</a> <code>setState(changes)</code></h3>\n<h3 id=\"setstate(...path%2C-changes)\"><a class=\"header-anchor\" href=\"#setstate(...path%2C-changes)\">#</a> <code>setState(...path, changes)</code></h3>\n<h3 id=\"setstate(%5B...path%2C-changes%5D%2C-%5B...path%2C-changes%5D)\"><a class=\"header-anchor\" href=\"#setstate(%5B...path%2C-changes%5D%2C-%5B...path%2C-changes%5D)\">#</a> <code>setState([...path, changes], [...path, changes])</code></h3>\n<p>This merges the changes into the path on the state object. All changes made in a single setState command are applied syncronously (ie all changes see each other at the same time). Changes can take the form of function that passes previous state and returns new state or a value. Objects are always merged.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setState</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createState</span><span style=\"color: #6A7E89\">({ firstName: </span><span style=\"color: #84C4CE\">&#39;John&#39;</span><span style=\"color: #6A7E89\">, lastName: </span><span style=\"color: #84C4CE\">&#39;Miller&#39;</span><span style=\"color: #6A7E89\"> });</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">({ firstName: </span><span style=\"color: #84C4CE\">&#39;Johnny&#39;</span><span style=\"color: #6A7E89\">, middleName: </span><span style=\"color: #84C4CE\">&#39;Lee&#39;</span><span style=\"color: #6A7E89\"> })</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// ({ firstName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Miller&#39; })</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> { preferredName: </span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">firstName</span><span style=\"color: #6A7E89\">, lastName: </span><span style=\"color: #84C4CE\">&#39;Milner&#39;</span><span style=\"color: #6A7E89\"> });</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// ({ firstName: &#39;Johnny&#39;, preferredName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Milner&#39; })</span></span></code></pre>\n<p>The function form is not terribly useful top level given Solid's synchronous nature. However, setState also supports nested setting where you can indicate the path to the change. When nested the state you are updating may be other non Object values. Objects are still merged but other values (including Arrays) are replaced.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setState</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createState</span><span style=\"color: #6A7E89\">({</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  counter: </span><span style=\"color: #529CA8\">2</span><span style=\"color: #6A7E89\">,</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  list: [</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    { id: </span><span style=\"color: #529CA8\">23</span><span style=\"color: #6A7E89\">, title: </span><span style=\"color: #84C4CE\">&#39;Birds&#39;</span><span style=\"color: #6A7E89\"> }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    { id: </span><span style=\"color: #529CA8\">27</span><span style=\"color: #6A7E89\">, title: </span><span style=\"color: #84C4CE\">&#39;Fish&#39;</span><span style=\"color: #6A7E89\"> }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">});</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;counter&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">c</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">c</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">+</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;list&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">l</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #D4856A\">...</span><span style=\"color: #3E4A51\">l</span><span style=\"color: #6A7E89\">, {id: </span><span style=\"color: #529CA8\">43</span><span style=\"color: #6A7E89\">, title: </span><span style=\"color: #84C4CE\">&#39;Marsupials&#39;</span><span style=\"color: #6A7E89\">}]);</span></span>\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;list&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #529CA8\">2</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #84C4CE\">&#39;read&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #D4856A\">true</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// {</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   counter: 3,</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { id: 27, title: &#39;Fish&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { id: 43, title: &#39;Marsupials&#39;, read: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// }</span></span></code></pre>\n<p>Path can be string keys, array of keys, wildcards ('*'), iterating objects ({from, to, by}), or filter functions. This gives incredible expressive power to describe state changes.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setState</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createState</span><span style=\"color: #6A7E89\">({</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    { task: </span><span style=\"color: #84C4CE\">&#39;Finish work&#39;</span><span style=\"color: #6A7E89\">, completed: </span><span style=\"color: #D4856A\">false</span><span style=\"color: #6A7E89\"> }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    { task: </span><span style=\"color: #84C4CE\">&#39;Go grocery shopping&#39;</span><span style=\"color: #6A7E89\">, completed: </span><span style=\"color: #D4856A\">false</span><span style=\"color: #6A7E89\"> }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    { task: </span><span style=\"color: #84C4CE\">&#39;Make dinner&#39;</span><span style=\"color: #6A7E89\">, completed: </span><span style=\"color: #D4856A\">false</span><span style=\"color: #6A7E89\"> }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">});</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;todos&#39;</span><span style=\"color: #6A7E89\">, [</span><span style=\"color: #529CA8\">0</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #529CA8\">2</span><span style=\"color: #6A7E89\">], </span><span style=\"color: #84C4CE\">&#39;completed&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #D4856A\">true</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// {</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Finish work&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Go grocery shopping&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// }</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;todos&#39;</span><span style=\"color: #6A7E89\">, { from: </span><span style=\"color: #529CA8\">0</span><span style=\"color: #6A7E89\">, to: </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\"> }, </span><span style=\"color: #84C4CE\">&#39;completed&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">c</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">!</span><span style=\"color: #3E4A51\">c</span><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// {</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Go grocery shopping&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// }</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;todos&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">todo</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">todo</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">completed</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #84C4CE\">&#39;title&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">t</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">t</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">+</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #84C4CE\">&#39;!&#39;</span><span style=\"color: #6A7E89\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// {</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Go grocery shopping!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Make dinner!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// }</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;todos&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #84C4CE\">&#39;*&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">todo</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> { marked: </span><span style=\"color: #D4856A\">true</span><span style=\"color: #6A7E89\">, completed: </span><span style=\"color: #D4856A\">!</span><span style=\"color: #3E4A51\">todo</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #3E4A51\">completed</span><span style=\"color: #6A7E89\"> })</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// {</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Finish work&#39;, completed: true, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Go grocery shopping!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { task: &#39;Make dinner!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// }</span></span></code></pre>\n<p>Additionally you can do multiple sets in a single call by passing an array of paths and changes.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #5298C4\">const</span><span style=\"color: #6A7E89\"> [</span><span style=\"color: #3E4A51\">state</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">setState</span><span style=\"color: #6A7E89\">] </span><span style=\"color: #D4856A\">=</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #43B5B3\">createState</span><span style=\"color: #6A7E89\">({</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  counter: </span><span style=\"color: #529CA8\">2</span><span style=\"color: #6A7E89\">,</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  list: [</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    { id: </span><span style=\"color: #529CA8\">23</span><span style=\"color: #6A7E89\">, title: </span><span style=\"color: #84C4CE\">&#39;Birds&#39;</span><span style=\"color: #6A7E89\"> }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    { id: </span><span style=\"color: #529CA8\">27</span><span style=\"color: #6A7E89\">, title: </span><span style=\"color: #84C4CE\">&#39;Fish&#39;</span><span style=\"color: #6A7E89\"> }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">});</span></span>\n\n<span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  [</span><span style=\"color: #84C4CE\">&#39;counter&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">c</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">c</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">*</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #529CA8\">3</span><span style=\"color: #6A7E89\">],</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  [</span><span style=\"color: #84C4CE\">&#39;list&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #529CA8\">1</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #84C4CE\">&#39;title&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">t</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #5298C4\">=&gt;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #3E4A51\">t</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #D4856A\">+</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #84C4CE\">&#39;!&#39;</span><span style=\"color: #6A7E89\">]</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">);</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// {</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   counter: 6,</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//     { id: 27, title: &#39;Fish!&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #A6B4BC\">// }</span></span></code></pre>\n<h3 id=\"reconcile(...path%2C-value)\"><a class=\"header-anchor\" href=\"#reconcile(...path%2C-value)\">#</a> <code>reconcile(...path, value)</code></h3>\n<p>This can be used to do deep diffs by applying the changes from a new State value. This is useful when pulling in immutable data trees from stores to ensure the least amount of mutations to your state. It can also be used to replace the all keys on the base state object if no path is provided as it does both positive and negative diff.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #43B5B3\">reconcile</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;users&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">store</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #43B5B3\">get</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;users&#39;</span><span style=\"color: #6A7E89\">)))</span></span></code></pre>\n<p>If you pass as array you can configure the diff algorithm with an options object:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #43B5B3\">setState</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #43B5B3\">reconcile</span><span style=\"color: #6A7E89\">(</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  [</span><span style=\"color: #84C4CE\">&#39;users&#39;</span><span style=\"color: #6A7E89\">, </span><span style=\"color: #3E4A51\">store</span><span style=\"color: #6A7E89\">.</span><span style=\"color: #43B5B3\">get</span><span style=\"color: #6A7E89\">(</span><span style=\"color: #84C4CE\">&#39;users&#39;</span><span style=\"color: #6A7E89\">)],</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  {</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    key: </span><span style=\"color: #84C4CE\">&#39;_id&#39;</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #A6B4BC\">// does a keyed comparison on arrays with key - default: &#39;id&#39;</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">    </span><span style=\"color: #3E4A51\">merge</span><span style=\"color: #6A7E89\">: </span><span style=\"color: #D4856A\">false</span><span style=\"color: #6A7E89\"> </span><span style=\"color: #A6B4BC\">//  overwrites rather than detects array position changes when not keyed - default: false</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">  }</span></span>\n<span class=\"line\"><span style=\"color: #6A7E89\">))</span></span></code></pre>\n</section>",
  "body": "<b>Breaking Change</b> h is no longer exposed from 'solid-js/dom'\r\n\r\nAdd support for multiple renderers (JSX, Tagged Template Literals, HyperScript). Added direct imports or 'solid-js/dom' alternatives 'solid-js/html' and 'solid-js/h'.\r\n\r\nNew Tagged Template Literal renderer compiles at runtime down to similar code to Babel JSX plugin. "
}
{
  "files": [
    {
      "name": "main",
      "content": "import { createState, lazy, onCleanup } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport AsyncChild from \"AsyncChild\";\n\nconst LazyChild = lazy(() => import(\"tab1\"));\nconst LazyAsyncChild = lazy(() => import(\"SimpleChild\"));\n\nconst Loader = () => {\n  const [state, setState] = createState({ count: 0 }),\n    interval = setInterval(() => setState(\"count\", (c) => c + 1), 1000);\n  onCleanup(() => clearInterval(interval));\n\n  return <div>Loading... {state.count}</div>;\n};\n\nconst App = () => {\n  const startTime = Date.now();\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <AsyncChild start={startTime} />\n      <AsyncChild start={startTime} />\n      <AsyncChild start={startTime} />\n      <AsyncChild start={startTime} />\n      <LazyChild start={startTime} />\n      <LazyAsyncChild start={startTime} />\n    </Suspense>\n  );\n};\n\nrender(App, document.getElementById(\"app\"));"
    },
    {
      "name": "AsyncChild",
      "content": "export default ({ start }) => (\n  <div>Simple loaded after {Date.now() - start}ms</div>\n);"
    },
    {
      "name": "SimpleChild",
      "content": "import { createResourceState } from \"solid-js\";\n\nfunction createDelay() {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve(Date.now()), Math.random() * 8000)\n  );\n}\n\nconst AsyncChild = ({ start }) => {\n  const [state, load] = createResourceState();\n  load({ time: createDelay });\n  return <div>Async loaded after {state.time - start}ms</div>;\n};\n\nexport default AsyncChild;"
    }
  ]
}
